(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var pricesSection = document.querySelector('.prices');
var arrayOfCards = pricesSection.querySelectorAll('.price-card');
var firstPriceCard = arrayOfCards[0];

var params = {
  width: null,
  lastWidth: null,
  height: 120,
  triangleHeight: 40,
  rectHeight: function rectHeight() {
    return params.height - params.triangleHeight;
  },
  colorStart: '#fd712c',
  colorEnd: '#f21780',
  colorDefault: 'white',
  animationLength: 500
};

var getWidth = function getWidth() {
  var priceBlock = firstPriceCard.querySelector('.price-card__price');
  params.width = priceBlock.clientWidth;
};

var setCanvasSize = function setCanvasSize(canvas) {
  canvas.setAttribute('width', params.width + 'px');
  canvas.setAttribute('height', params.height + 'px');
};

var createGradient = function createGradient(ctx) {
  var gradient = ctx.createLinearGradient(0, 0, params.width, 0);
  gradient.addColorStop(0, params.colorStart);
  gradient.addColorStop(1, params.colorEnd);
  return gradient;
};

var drawPentagon = function drawPentagon(canvas, fillStyle, alpha) {
  var ctx = canvas.getContext('2d');
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  ctx.globalAlpha = alpha;
  ctx.fillStyle = fillStyle;
  ctx.beginPath();
  ctx.moveTo(0, 0);
  ctx.lineTo(params.width, 0);
  ctx.lineTo(params.width, params.rectHeight());
  ctx.lineTo(params.width / 2, params.height);
  ctx.lineTo(0, params.rectHeight());
  ctx.fill();
};

// const drawAnimation = (startTime, canvas, ctx, color) => {
//   const intervalID = setInterval(() => {
//     const currTime = Date.now();
//     const progress = currTime - startTime;
//     const alphaValue = progress / params.animationLength;
//     drawPentagon(canvas, ctx, color, alphaValue);
//   }, 20);
//   setTimeout(() => clearInterval(intervalID), params.animationLength);
// };

var createPriceCanvasElement = function createPriceCanvasElement(singleCard) {
  // const wrapper = singleCard.querySelector('.price-card__wrapper');
  var backgroundCanvas = singleCard.querySelector('.price-canvas__background');
  var canvas = singleCard.querySelector('.price-canvas__canvas');
  var gradient = createGradient(canvas.getContext('2d'));

  setCanvasSize(backgroundCanvas);
  drawPentagon(backgroundCanvas, params.colorDefault, 1);

  setCanvasSize(canvas);
  drawPentagon(canvas, gradient, 1);

  // wrapper.addEventListener('mouseenter', () => {
  //   const startTime = Date.now();
  //   drawAnimation(startTime, canvas, ctx, gradient);
  // });


  // wrapper.addEventListener('mouseleave', () => {
  //   setTimeout(() => drawPentagon(canvas, ctx, params.colorDefault, 1), params.animationLength);
  // });
};

// Выполнение скрипта
getWidth();
arrayOfCards.forEach(createPriceCanvasElement);
params.lastWidth = params.width;

window.addEventListener('resize', function () {
  getWidth();
  if (params.lastWidth === params.width) {
    return;
  }
  arrayOfCards.forEach(createPriceCanvasElement);
  params.lastWidth = params.width;
});

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var TIME_PARAMETERS = {
  debounceInterval: 500
};

var lastTimeout = void 0;

var debounce = function debounce(callback) {
  if (lastTimeout) {
    window.clearTimeout(lastTimeout);
  }
  lastTimeout = window.setTimeout(callback, TIME_PARAMETERS.debounceInterval);
};

exports.default = debounce;

},{}]},{},[1,2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
